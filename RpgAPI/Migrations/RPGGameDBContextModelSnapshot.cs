// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RpgAPI.Data_Access;

#nullable disable

namespace RpgAPI.Migrations
{
    [DbContext(typeof(RPGGameDBContext))]
    partial class RPGGameDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RpgAPI.Models.GameEntity", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EntityId"), 1L, 1);

                    b.Property<int>("AttackPoints")
                        .HasColumnType("int");

                    b.Property<int>("CurrentHealthPoints")
                        .HasColumnType("int");

                    b.Property<int>("CurrentManaPoints")
                        .HasColumnType("int");

                    b.Property<int>("DefencePoints")
                        .HasColumnType("int");

                    b.Property<int?>("EnemyId")
                        .HasColumnType("int");

                    b.Property<int>("GameMapId")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsPlayer")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MaxHealthPoints")
                        .HasColumnType("int");

                    b.Property<int>("MaxManaPoints")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<float>("PositionX")
                        .HasColumnType("real");

                    b.Property<float>("PositionY")
                        .HasColumnType("real");

                    b.Property<float>("Speed")
                        .HasColumnType("real");

                    b.HasKey("EntityId");

                    b.HasIndex("EnemyId");

                    b.HasIndex("GameMapId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GameEntities", (string)null);

                    b.HasData(
                        new
                        {
                            EntityId = 12345678L,
                            AttackPoints = 300,
                            CurrentHealthPoints = 100,
                            CurrentManaPoints = 500,
                            DefencePoints = 400,
                            GameMapId = 1,
                            Gender = 1,
                            IsPlayer = true,
                            Level = 1,
                            MaxHealthPoints = 200,
                            MaxManaPoints = 600,
                            Name = "Test",
                            PlayerId = 1,
                            PositionX = 43f,
                            PositionY = 98f,
                            Speed = 3f
                        },
                        new
                        {
                            EntityId = 87654321L,
                            AttackPoints = 500,
                            CurrentHealthPoints = 100,
                            CurrentManaPoints = 400,
                            DefencePoints = 600,
                            EnemyId = 123,
                            GameMapId = 2,
                            Gender = 2,
                            IsPlayer = false,
                            Level = 45,
                            MaxHealthPoints = 2000,
                            MaxManaPoints = 1000,
                            Name = "Enemy1",
                            PositionX = 56f,
                            PositionY = 21f,
                            Speed = 5f
                        },
                        new
                        {
                            EntityId = 11111111L,
                            AttackPoints = 34,
                            CurrentHealthPoints = 200,
                            CurrentManaPoints = 322,
                            DefencePoints = 600,
                            EnemyId = 456,
                            GameMapId = 3,
                            Gender = 1,
                            IsPlayer = false,
                            Level = 3,
                            MaxHealthPoints = 400,
                            MaxManaPoints = 800,
                            Name = "Enemy2",
                            PositionX = 44f,
                            PositionY = 55f,
                            Speed = 1f
                        },
                        new
                        {
                            EntityId = 22222223L,
                            AttackPoints = 60,
                            CurrentHealthPoints = 500,
                            CurrentManaPoints = 76,
                            DefencePoints = 34,
                            GameMapId = 4,
                            Gender = 1,
                            IsPlayer = true,
                            Level = 50,
                            MaxHealthPoints = 1000,
                            MaxManaPoints = 200,
                            Name = "Player 2",
                            PlayerId = 2,
                            PositionX = 22f,
                            PositionY = 76f,
                            Speed = 6f
                        });
                });

            modelBuilder.Entity("RpgAPI.Models.GameMap", b =>
                {
                    b.Property<int>("GameMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameMapId"), 1L, 1);

                    b.Property<int>("WorldMapCol")
                        .HasColumnType("int");

                    b.Property<int>("WorldMapRow")
                        .HasColumnType("int");

                    b.HasKey("GameMapId");

                    b.ToTable("GameMaps", (string)null);

                    b.HasData(
                        new
                        {
                            GameMapId = 1,
                            WorldMapCol = 72,
                            WorldMapRow = 45
                        },
                        new
                        {
                            GameMapId = 2,
                            WorldMapCol = 22,
                            WorldMapRow = 50
                        },
                        new
                        {
                            GameMapId = 3,
                            WorldMapCol = 12,
                            WorldMapRow = 42
                        },
                        new
                        {
                            GameMapId = 4,
                            WorldMapCol = 90,
                            WorldMapRow = 56
                        });
                });

            modelBuilder.Entity("RpgAPI.Models.NPCEnemy", b =>
                {
                    b.Property<int>("EnemyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnemyId"), 1L, 1);

                    b.Property<float>("BattleAreaRadius")
                        .HasColumnType("real");

                    b.Property<int>("BattleTimeout")
                        .HasColumnType("int");

                    b.Property<int>("EnemyType")
                        .HasColumnType("int");

                    b.Property<float>("WanderAreaRadius")
                        .HasColumnType("real");

                    b.HasKey("EnemyId");

                    b.ToTable("Enemies", (string)null);

                    b.HasData(
                        new
                        {
                            EnemyId = 123,
                            BattleAreaRadius = 250f,
                            BattleTimeout = 60,
                            EnemyType = 0,
                            WanderAreaRadius = 400f
                        },
                        new
                        {
                            EnemyId = 456,
                            BattleAreaRadius = 32f,
                            BattleTimeout = 60,
                            EnemyType = 1,
                            WanderAreaRadius = 5000f
                        });
                });

            modelBuilder.Entity("RpgAPI.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerId"), 1L, 1);

                    b.Property<int>("CriticalPoints")
                        .HasColumnType("int");

                    b.Property<int>("ExpPoints")
                        .HasColumnType("int");

                    b.Property<int>("IntelligencePoints")
                        .HasColumnType("int");

                    b.Property<int>("PlayerType")
                        .HasColumnType("int");

                    b.Property<int>("StrengthPoints")
                        .HasColumnType("int");

                    b.HasKey("PlayerId");

                    b.ToTable("Players", (string)null);

                    b.HasData(
                        new
                        {
                            PlayerId = 1,
                            CriticalPoints = 300,
                            ExpPoints = 500,
                            IntelligencePoints = 200,
                            PlayerType = 0,
                            StrengthPoints = 100
                        },
                        new
                        {
                            PlayerId = 2,
                            CriticalPoints = 400,
                            ExpPoints = 500,
                            IntelligencePoints = 300,
                            PlayerType = 1,
                            StrengthPoints = 200
                        });
                });

            modelBuilder.Entity("RpgAPI.Models.GameEntity", b =>
                {
                    b.HasOne("RpgAPI.Models.NPCEnemy", "Enemy")
                        .WithMany("GameEntity")
                        .HasForeignKey("EnemyId");

                    b.HasOne("RpgAPI.Models.GameMap", "GameMap")
                        .WithMany("GameEntity")
                        .HasForeignKey("GameMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RpgAPI.Models.Player", "Player")
                        .WithMany("GameEntity")
                        .HasForeignKey("PlayerId");

                    b.Navigation("Enemy");

                    b.Navigation("GameMap");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("RpgAPI.Models.GameMap", b =>
                {
                    b.Navigation("GameEntity");
                });

            modelBuilder.Entity("RpgAPI.Models.NPCEnemy", b =>
                {
                    b.Navigation("GameEntity");
                });

            modelBuilder.Entity("RpgAPI.Models.Player", b =>
                {
                    b.Navigation("GameEntity");
                });
#pragma warning restore 612, 618
        }
    }
}
